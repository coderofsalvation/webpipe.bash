#!/bin/bash 
#
# Copyright (C) 2014, Coder of Salvation / Leon van Kammen 
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# this will hold specific curl options (when webpipes need authorisation)
declare -A CURL_OPTIONS
declare -A WEBPIPES 
WEBPIPE_TMPDIR=~/.webpipe/cache
WEBPIPE_TMPFILE=~/.webpipe/.$(whoami).tmp
WEBPIPE_SOURCED="$(date +%s)"
C_NORMAL="\\033[0;0m" 
C_BRIGHT="\\033[1;36m"

[[ ! -d $WEBPIPE_TMPDIR ]] && mkdir -p $WEBPIPE_TMPDIR

webpipe::set(){
  [[ ${#1} == 0 ]] && echo "Usage: webpipe::set <cmd> <arg>" && return 1;
  case "$1" in
    curloptions) CURL_OPTIONS["$2"]="$3"      ;;
    webpipe)    cmd="${cmd/\/$/}"; cmd="$(basename "$2")"; WEBPIPES["$cmd"]="$2"; alias "$cmd"="webpipe::get $cmd";;
  esac
}

webpipe::reset(){
  WEBPIPES=()
}

urlencode() {
  local string="${1}"; local strlen=${#string}; local encoded=""
  for (( pos=0 ; pos<strlen ; pos++ )); do
     c=${string:$pos:1}
     case "$c" in
        [-_.~a-zA-Z0-9] ) o="${c}" ;;
        * )               printf -v o '%%%02x' "'$c"
     esac
     encoded+="${o}"
  done
  echo "${encoded}"    # You can either set a return variable (FASTER) 
}

webpipe::get_domain(){
  domain="${1/http:/}"; domain="${domain/https:/}"; domain="${domain/\/\//}"; domain="${domain//\/*/}"; 
  printf "$domain"
}

webpipe::args2http(){
  httpstr="?"; pos=1; lastarg=""
  for arg in "$@"; do 
    if [[ "${arg:0:1}" == "-" ]]; then
      key="${arg//-/}"; httpstr="$httpstr&$key="; lastarg="option"
    else
      [[ "$lastarg" == "option" ]] && httpstr="$httpstr$(urlencode "$arg")" || {
        httpstr="$httpstr&$pos=$(urlencode "$arg")"; ((pos++));
      };
      lastarg="positional"
    fi
  done
  echo "${httpstr/?&/?}"
}

webpipe::get(){
  name="$1"; url="${WEBPIPES[$1]}"; getstr=""; POST=""; X=POST
  WEBPIPE_TMPFILE=~/.webpipe/.$(whoami).tmp.$name.$(date +%s%N) # prevent race-condition when piping
  :> $WEBPIPE_TMPFILE.post; payload="";
  domain="$(webpipe::get_domain "$url")"
  # declare -A CURL_OPTIONS                                     # bash bug? we need to do this again
  curloptions="${CURL_OPTIONS["$domain"]}"
  shift; [[ ! -f "$1" ]] && getstr="$(webpipe::args2http "$@")"
  [[ "${#url}" == 0   ]] && return 1;
  [[ "$2" == "--help" ]] && X="OPTIONS";
  [[ ! -n "$1"        ]] && [[ -t 0 ]] && X="OPTIONS";
  [[ ! -n $TYPE ]] && type="text/plain" || type="$TYPE"
  if [[ -f "$1" ]]; then                                  # read/send jsonfile when json payload file is given
    payload="$(cat "$1" | sed ':a;N;$!ba;s/\n//g' )"
    [[ ! -t 0 ]] && {
      pipedata="$(cat - | base64 )";
      payload="${payload/\$pipe/$pipedata}"
    }
    echo "$payload" > $WEBPIPE_TMPFILE.post 
    type="application/json"
  elif [[ -t 0 ]]; then 
    X=GET; 
  else 
    cat - > $WEBPIPE_TMPFILE.post; 
  fi
  [[ -n $CAPTURE ]] && { 
    destfile="$name.payload.$(date +%s).json"; 
    cp $WEBPIPE_TMPFILE.post $destfile &&
    echo "written $destfile" 1>&2;
  }
  [[ ! $X == "GET" ]] && POST="@$WEBPIPE_TMPFILE.post" || POST=""; 
  curl -L -s -X $X ${curloptions} -d "$POST" -H "Content-Type: $type" "$url$getstr"
  [[ -f "$WEBPIPE_TMPFILE.post" ]] && rm "$WEBPIPE_TMPFILE.post"
  return $?
}

webpipe::index(){
  domain="$(webpipe::get_domain "$1")"; hash="$(echo "$1" | md5sum | sed 's/ .*//g')"; now="$(date +%s)"
  if [[ ! $- =~ "i" ]] || [[ $((now-WEBPIPE_SOURCED)) < 1 ]] && [[ -f $WEBPIPE_TMPDIR/$hash ]]; then 
    # re-use cache when noninteractive
    pipes="$(cat $WEBPIPE_TMPDIR/$hash)"
  else
    # declare -A CURL_OPTIONS # bash bug? we need to do this again
    curloptions="${CURL_OPTIONS["$domain"]}"
    pipes="$(curl -L -s ${curloptions} "$1")"; (( $? > 0 )) && { echo "could not fetch $url"; return 1; }
    if [[ "$pipes" =~ "<" ]] || [[ "$pipes" =~ "{" ]]; then echo "$pipes"; return 1; fi 
    echo "$pipes" > $WEBPIPE_TMPDIR/$hash
  fi
  while read url; do  # not sure why we do this 
    [[ $- =~ "i" ]] && [[ $((now-WEBPIPE_SOURCED)) > 1 ]] && echo "webpipe> adding $url"
    webpipe::set webpipe "$url"
  done < $WEBPIPE_TMPDIR/$hash
}

webpipe::list(){
  for webpipe in "${!WEBPIPES[@]}"; do printf "$C_BRIGHT""%-20s $C_NORMAL -> %s\n" "$webpipe" "${WEBPIPES[$webpipe]}"; done
}
